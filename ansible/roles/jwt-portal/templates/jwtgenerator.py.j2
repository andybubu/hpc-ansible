#!/bin/python3

import zlib
import flask
import logging
import subprocess

from flask import request, jsonify
from flask_restful import reqparse
from base64 import urlsafe_b64encode as b64e, urlsafe_b64decode as b64d
from gevent.pywsgi import WSGIServer

def unobscure(obscured):
    return zlib.decompress(b64d(obscured))


app = flask.Flask(__name__)
app.config["DEBUG"] = True

##############################################################################################################
@app.route('/api/v1/create_token', methods=['POST', 'GET'])
def create_token():

    print ("create_token started")


    ######
    #### handle password for truth
    c_text= b'eNozsi3RC8n2NQIACj4CUA=='
    b_text=unobscure (c_text)
    a_text=b_text.decode("utf-8")
    print (c_text)
    print (b_text)
    print (a_text)



    results = {}


    parser = reqparse.RequestParser()
    parser.add_argument('trust')
    parser.add_argument('id')
    parser.add_argument('lifespan', default=1800)
    args = parser.parse_args()

    id = ""
    lifespan = 0
    trust=""

    if 'trust' in args:
        trust = args['trust']
    else:
        results["status"]='fail'
        results["error"]='Error: Missing field. Please specify an trust.'
        return jsonify(results)

    # now check trust
    if trust != a_text:
        results["status"]='fail'
        results["error"]='Trust password incorrect'
        return jsonify(results)


    if 'id' in args:
        id = args['id']
    else:
        results["status"]='fail'
        results["error"]='Error: Missing field. Please specify an id'
        return jsonify(results)

    if 'lifespan' in args:
        lifespan = int(args['lifespan'])
    else:
        lifespan = 1800


    ########################
    # check for invalid characers in passed paramerters

    try:
        # Convert it into integer
        val = lifespan
    except ValueError:
        results["status"]='fail'
        results["error"]='lifespan is not a number'
        return jsonify(results)

    if not id.isalnum():
        results["status"]='fail'
        results["error"]="login name is invalid"
        return jsonify(results)

    print ("id=",id)
    print ("lifespan=",lifespan)
    print ("trust=",trust)


    cmd="/usr/local/slurm/bin/scontrol token username={} lifespan={}".format(id,lifespan)
    print ("cmd=", cmd)

    process = subprocess.Popen(cmd.split(), universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    output, error = process.communicate()

    results = {}

    print (output)
    print (error)

    if process.returncode == 0:
        results["status"]='ok'
        results["token"]=output
    else:
        results["status"]='fail'
        results["error"]=error

    print ("create_token end")
    return jsonify(results)



##############################################################################################################
if __name__ == "__main__": 
    http_server = WSGIServer(("0.0.0.0", 3003), app) 
    http_server.serve_forever()
